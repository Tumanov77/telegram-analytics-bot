#!/usr/bin/env python3
"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è Telegram Analytics Bot
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class DemoTelegramAnalyticsBot:
    """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–±–æ—Ç–∞"""
        self.demo_messages = self._create_demo_messages()
        logger.info("ü§ñ –î–µ–º–æ-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _create_demo_messages(self) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return [
            {
                'chat_id': 'work_chat_1',
                'title': '–†–∞–±–æ—á–∏–π —á–∞—Ç - –ü—Ä–æ–µ–∫—Ç Alpha',
                'sender': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                'text': '–î–æ–≥–æ–≤–æ—Ä –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≥–æ—Ç–æ–≤, –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Å—Ä–æ–∫–∏ —Å–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞',
                'ts': datetime.now() - timedelta(minutes=30),
                'is_business': False
            },
            {
                'chat_id': 'work_chat_1', 
                'title': '–†–∞–±–æ—á–∏–π —á–∞—Ç - –ü—Ä–æ–µ–∫—Ç Alpha',
                'sender': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
                'text': '–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 15%, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–º–µ—Ç—É',
                'ts': datetime.now() - timedelta(minutes=25),
                'is_business': False
            },
            {
                'chat_id': 'work_chat_2',
                'title': '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                'sender': '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
                'text': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥ –≤ –º–æ–¥—É–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω—É–∂–µ–Ω —Å—Ä–æ—á–Ω—ã–π —Ñ–∏–∫—Å',
                'ts': datetime.now() - timedelta(minutes=20),
                'is_business': False
            },
            {
                'chat_id': 'work_chat_2',
                'title': '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 
                'sender': '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
                'text': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ä–µ–ª–∏–∑',
                'ts': datetime.now() - timedelta(minutes=15),
                'is_business': False
            },
            {
                'chat_id': 'work_chat_3',
                'title': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥–∞',
                'sender': '–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤',
                'text': 'ROI –∫–∞–º–ø–∞–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∏–ª 340%, –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã',
                'ts': datetime.now() - timedelta(minutes=10),
                'is_business': False
            },
            {
                'chat_id': 'personal_chat_1',
                'title': '–õ–∏—á–Ω—ã–π —á–∞—Ç',
                'sender': '–î—Ä—É–≥',
                'text': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ?',
                'ts': datetime.now() - timedelta(minutes=5),
                'is_business': False
            }
        ]
    
    def demo_filter_work_messages(self, messages: List[Dict]) -> List[Dict]:
        """–î–µ–º–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        work_keywords = [
            '–¥–æ–≥–æ–≤–æ—Ä', '–ø—Ä–æ–µ–∫—Ç', '–±—é–¥–∂–µ—Ç', '—Å–º–µ—Ç–∞', '–±–∞–≥', '—Ñ–∏—á–∞', '—Ä–µ–ª–∏–∑', 
            'ROI', '–∫–∞–º–ø–∞–Ω–∏—è', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        ]
        
        work_messages = []
        for msg in messages:
            text_lower = msg['text'].lower()
            if any(keyword in text_lower for keyword in work_keywords):
                work_messages.append(msg)
        
        return work_messages
    
    def demo_gpt_analysis(self, messages: List[Dict]) -> Dict:
        """–î–µ–º–æ –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è GPT)"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ GPT
        agreements = [
            "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ —Å–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞",
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã –≤ —Å–≤—è–∑–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 15%",
            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–æ–≤–æ–π —Ñ–∏—á–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        ]
        
        risks = [
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥ –≤ –º–æ–¥—É–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å—Ä–æ–∫–∏"
        ]
        
        recommendations = [
            "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ—Ç—É –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞ –±–∞–≥–∞",
            "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã",
            "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–¥–µ—Ä–∂–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞"
        ]
        
        return {
            'summary': {
                'agreements': agreements,
                'risks': risks,
                'recommendations': recommendations
            },
            'raw_response': f"–ê–Ω–∞–ª–∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω",
            'prompt_tokens': 150,
            'completion_tokens': 200,
            'total_tokens': 350,
            'analyzed_at': datetime.now().isoformat(),
            'messages_count': len(messages)
        }
    
    def format_demo_report(self, analysis_result: Dict, active_chats_count: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-–æ—Ç—á–µ—Ç–∞ –¥–ª—è Telegram"""
        summary = analysis_result['summary']
        
        report = f"üóÇ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∑–∞ —á–∞—Å: {active_chats_count}\n\n"
        
        # –î–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        agreements = summary.get('agreements', [])
        if agreements:
            report += "üìå –∫–ª—é—á–µ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:\n"
            for agreement in agreements[:6]:
                report += f"- {agreement}\n"
            report += "\n"
        
        # –†–∏—Å–∫–∏
        risks = summary.get('risks', [])
        if risks:
            report += "‚ö†Ô∏è —Ä–∏—Å–∫–∏:\n"
            for risk in risks[:3]:
                report += f"- {risk}\n"
            report += "\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = summary.get('recommendations', [])
        if recommendations:
            report += "üöÄ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for rec in recommendations[:5]:
                report += f"- {rec}\n"
        
        return report
    
    async def demo_hourly_analysis(self):
        """–î–µ–º–æ —á–∞—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        now = datetime.now()
        hour_ago = now - timedelta(hours=1)
        
        recent_messages = [
            msg for msg in self.demo_messages 
            if msg['ts'] >= hour_ago
        ]
        
        logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(recent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        work_messages = self.demo_filter_work_messages(recent_messages)
        logger.info(f"üíº –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(work_messages)} —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if not work_messages:
            logger.info("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º
        chats_messages = {}
        for msg in work_messages:
            chat_id = msg['chat_id']
            if chat_id not in chats_messages:
                chats_messages[chat_id] = []
            chats_messages[chat_id].append(msg)
        
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(chats_messages)} —á–∞—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
        all_reports = []
        for chat_id, chat_messages in chats_messages.items():
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞: {chat_messages[0]['title']}")
            
            analysis_result = self.demo_gpt_analysis(chat_messages)
            all_reports.append({
                'chat_id': chat_id,
                'chat_title': chat_messages[0]['title'],
                'analysis': analysis_result
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        if all_reports:
            await self.demo_send_report(all_reports, len(chats_messages))
            await self.demo_archive_results(all_reports)
        
        logger.info("‚úÖ –î–µ–º–æ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def demo_send_report(self, reports: List[Dict], active_chats_count: int):
        """–î–µ–º–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        report_text = f"üóÇ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∑–∞ —á–∞—Å: {active_chats_count}\n\n"
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        all_agreements = []
        all_risks = []
        all_recommendations = []
        
        for report in reports:
            analysis = report['analysis']
            summary = analysis.get('summary', {})
            
            all_agreements.extend(summary.get('agreements', []))
            all_risks.extend(summary.get('risks', []))
            all_recommendations.extend(summary.get('recommendations', []))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if all_agreements:
            report_text += "üìå –∫–ª—é—á–µ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:\n"
            for agreement in all_agreements[:6]:
                report_text += f"- {agreement}\n"
            report_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫–∏
        if all_risks:
            report_text += "‚ö†Ô∏è —Ä–∏—Å–∫–∏:\n"
            for risk in all_risks[:3]:
                report_text += f"- {risk}\n"
            report_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if all_recommendations:
            report_text += "üöÄ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for rec in all_recommendations[:5]:
                report_text += f"- {rec}\n"
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        print("\n" + "="*50)
        print("üì± –û–¢–ß–ï–¢ –í TELEGRAM:")
        print("="*50)
        print(report_text)
        print("="*50 + "\n")
        
        logger.info("‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ")
    
    async def demo_archive_results(self, reports: List[Dict]):
        """–î–µ–º–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("üìÅ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–ø–∏—Å—å –≤ Google Drive –∏ Sheets
        for report in reports:
            chat_title = report['chat_title']
            analysis = report['analysis']
            summary = analysis.get('summary', {})
            
            logger.info(f"üìÑ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –¥–ª—è —á–∞—Ç–∞: {chat_title}")
            logger.info(f"   - –î–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {len(summary.get('agreements', []))}")
            logger.info(f"   - –†–∏—Å–∫–∏: {len(summary.get('risks', []))}")
            logger.info(f"   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(summary.get('recommendations', []))}")
        
        logger.info("‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    async def demo_status(self):
        """–î–µ–º–æ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        
        work_chats = len(set(msg['chat_id'] for msg in self.demo_messages 
                           if self.demo_filter_work_messages([msg])))
        
        print("\n" + "="*30)
        print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
        print("="*30)
        print(f"üîç –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.demo_messages)}")
        print(f"üíº –†–∞–±–æ—á–∏—Ö —á–∞—Ç–æ–≤: {work_chats}")
        print(f"ü§ñ –î–µ–º–æ-—Ä–µ–∂–∏–º: –ê–∫—Ç–∏–≤–µ–Ω")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*30 + "\n")
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞"""
        logger.info("üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ Telegram Analytics Bot")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            await self.demo_status()
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            await self.demo_hourly_analysis()
            
            logger.info("üéâ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ"""
    print("ü§ñ Telegram Analytics Bot - –î–µ–º–æ —Ä–µ–∂–∏–º")
    print("="*50)
    
    demo_bot = DemoTelegramAnalyticsBot()
    await demo_bot.run_demo()


if __name__ == "__main__":
    asyncio.run(main())

"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é OpenAI GPT
–†–µ–∞–ª–∏–∑—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
"""

import logging
import openai
from typing import Dict, List, Optional, Tuple
from datetime import datetime

logger = logging.getLogger(__name__)


class MessageSummarizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é GPT"""
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    GPT_PROMPT = """–¢—ã ‚Äî –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —É—Ä–æ–≤–Ω—è –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–ê–ù–ê–õ–ò–ó –°–û–û–ë–©–ï–ù–ò–ô:
{context}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ 3 –±–ª–æ–∫–∞):
–î–û–ì–û–í–û–†–ï–ù–ù–û–°–¢–ò:
- [–∫–ª—é—á–µ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è, 3-6 –ø—É–Ω–∫—Ç–æ–≤]

–†–ò–°–ö–ò:
- [—Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ —Ä–∏—Å–∫–∏, –¥–æ 3 –ø—É–Ω–∫—Ç–æ–≤]

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–µ, –¥–æ 5 –ø—É–Ω–∫—Ç–æ–≤]

–§–æ–∫—É—Å –Ω–∞ —Ç–æ–º, –∫–∞–∫ —É—Å–∫–æ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã."""
    
    def __init__(self, api_key: str, model: str = "gpt-4o"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            api_key: OpenAI API –∫–ª—é—á
            model: –ú–æ–¥–µ–ª—å GPT –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        self.client = openai.OpenAI(api_key=api_key)
        self.model = model
        self.max_tokens = 4000  # –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    
    def _prepare_context(self, messages: List[Dict]) -> str:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        if not messages:
            return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º
        chats_context = {}
        for msg in messages:
            chat_id = msg.get('chat_id', 'unknown')
            chat_title = msg.get('title', f'–ß–∞—Ç {chat_id}')
            
            if chat_id not in chats_context:
                chats_context[chat_id] = {
                    'title': chat_title,
                    'messages': []
                }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sender = msg.get('sender', 'Unknown')
            text = msg.get('text', '')
            timestamp = msg.get('ts', '')
            
            formatted_msg = f"[{timestamp}] {sender}: {text}"
            chats_context[chat_id]['messages'].append(formatted_msg)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_parts = []
        for chat_id, chat_data in chats_context.items():
            context_parts.append(f"–ß–ê–¢: {chat_data['title']}")
            context_parts.extend(chat_data['messages'])
            context_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
        
        context = "\n".join(context_parts)
        
        # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(context) > self.max_tokens * 4:  # –ü—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
            context = context[:self.max_tokens * 4] + "\n... [–∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω]"
        
        return context
    
    def _parse_gpt_response(self, response: str) -> Dict[str, List[str]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç GPT
            
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: 'agreements', 'risks', 'recommendations'
        """
        result = {
            'agreements': [],
            'risks': [],
            'recommendations': []
        }
        
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏
            blocks = response.split('\n\n')
            
            for block in blocks:
                block = block.strip()
                if not block:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–ª–æ–∫–∞
                if '–î–û–ì–û–í–û–†–ï–ù–ù–û–°–¢–ò:' in block.upper():
                    lines = block.split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    for line in lines:
                        line = line.strip()
                        if line.startswith('-') or line.startswith('‚Ä¢'):
                            result['agreements'].append(line[1:].strip())
                
                elif '–†–ò–°–ö–ò:' in block.upper():
                    lines = block.split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    for line in lines:
                        line = line.strip()
                        if line.startswith('-') or line.startswith('‚Ä¢'):
                            result['risks'].append(line[1:].strip())
                
                elif '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:' in block.upper():
                    lines = block.split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    for line in lines:
                        line = line.strip()
                        if line.startswith('-') or line.startswith('‚Ä¢'):
                            result['recommendations'].append(line[1:].strip())
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ GPT: {e}")
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            result['recommendations'] = [response]
        
        return result
    
    def analyze_messages(self, messages: List[Dict]) -> Optional[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é GPT
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not messages:
            logger.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = self._prepare_context(messages)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self.GPT_PROMPT.format(context=context)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000,
                temperature=0.7
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            gpt_response = response.choices[0].message.content
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            parsed_result = self._parse_gpt_response(gpt_response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            result = {
                'summary': parsed_result,
                'raw_response': gpt_response,
                'prompt_tokens': response.usage.prompt_tokens if response.usage else 0,
                'completion_tokens': response.usage.completion_tokens if response.usage else 0,
                'total_tokens': response.usage.total_tokens if response.usage else 0,
                'analyzed_at': datetime.now().isoformat(),
                'messages_count': len(messages)
            }
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–æ–∫–µ–Ω—ã: {result['total_tokens']}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return None
    
    def format_report_for_telegram(self, analysis_result: Dict, active_chats_count: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (plain text)
        
        Args:
            analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç GPT
            active_chats_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        if not analysis_result or 'summary' not in analysis_result:
            return "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        summary = analysis_result['summary']
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        report = f"üóÇ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∑–∞ —á–∞—Å: {active_chats_count}\n\n"
        
        # –î–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        agreements = summary.get('agreements', [])
        if agreements:
            report += "üìå –∫–ª—é—á–µ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:\n"
            for agreement in agreements[:6]:  # –ú–∞–∫—Å–∏–º—É–º 6 –ø—É–Ω–∫—Ç–æ–≤
                report += f"- {agreement}\n"
            report += "\n"
        
        # –†–∏—Å–∫–∏
        risks = summary.get('risks', [])
        if risks:
            report += "‚ö†Ô∏è —Ä–∏—Å–∫–∏:\n"
            for risk in risks[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏
                report += f"- {risk}\n"
            report += "\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = summary.get('recommendations', [])
        if recommendations:
            report += "üöÄ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for rec in recommendations[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–æ–∫
                report += f"- {rec}\n"
        
        return report
    
    def get_analysis_stats(self, analysis_result: Dict) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        if not analysis_result:
            return {}
        
        summary = analysis_result.get('summary', {})
        
        return {
            'messages_analyzed': analysis_result.get('messages_count', 0),
            'agreements_count': len(summary.get('agreements', [])),
            'risks_count': len(summary.get('risks', [])),
            'recommendations_count': len(summary.get('recommendations', [])),
            'prompt_tokens': analysis_result.get('prompt_tokens', 0),
            'completion_tokens': analysis_result.get('completion_tokens', 0),
            'total_tokens': analysis_result.get('total_tokens', 0),
            'analyzed_at': analysis_result.get('analyzed_at', '')
        }

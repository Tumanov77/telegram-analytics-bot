"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã
"""

import logging
import asyncio
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from telegram import Update, Message, Chat, User
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

from .db import DatabaseManager
from .filters import MessageFilter
from .summarize import MessageSummarizer
from .archive import ArchiveManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_analytics.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TelegramAnalyticsBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    
    def __init__(self, bot_token: str, openai_api_key: str, 
                 google_credentials_file: str = None, target_user_id: int = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            openai_api_key: API –∫–ª—é—á OpenAI
            google_credentials_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Google credentials
            target_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
        """
        self.bot_token = bot_token
        self.target_user_id = target_user_id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db = DatabaseManager()
        self.message_filter = MessageFilter(self.db)
        self.summarizer = MessageSummarizer(openai_api_key)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if google_credentials_file and os.path.exists(google_credentials_file):
            try:
                self.archive_manager = ArchiveManager(google_credentials_file)
                logger.info("–ê—Ä—Ö–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
                self.archive_manager = None
        else:
            self.archive_manager = None
            logger.warning("–ê—Ä—Ö–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ—Ç Google credentials")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(bot_token).build()
        self._setup_handlers()
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("filter", self.filter_command))
        self.application.add_handler(CommandHandler("analyze", self.analyze_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, self.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É business_message –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat = update.effective_chat
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        self.db.insert_chat(
            chat_id=str(chat.id),
            title=chat.title or f"Chat with {user.first_name}",
            chat_type=chat.type,
            is_work=self.message_filter.is_work_chat(str(chat.id), chat.title or "")
        )
        
        welcome_text = """ü§ñ Telegram Analytics Bot –∑–∞–ø—É—â–µ–Ω!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–º–æ—â—å
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/filter - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
/analyze - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Ä—É—á–Ω—É—é

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã."""
        
        await update.message.reply_text(welcome_text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat.id}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """üìã –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/filter - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —á–∞—Ç–æ–≤
/analyze - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Ä—É—á–Ω—É—é

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:
/filter add allow <chat_id> - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ allowlist
/filter add deny <chat_id> - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ denylist
/filter add keyword <—Å–ª–æ–≤–æ> - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
/filter list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã

üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:
- –ö–∞–∂–¥—ã–π —á–∞—Å –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç
- –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Google Drive"""
        
        await update.message.reply_text(help_text)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            filter_stats = self.message_filter.get_filter_stats()
            work_chats = self.db.get_work_chats()
            
            status_text = f"""üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:

üîç –§–∏–ª—å—Ç—Ä—ã:
- Allowlist —á–∞—Ç–æ–≤: {filter_stats['allow_chats_count']}
- Denylist —á–∞—Ç–æ–≤: {filter_stats['deny_chats_count']}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {filter_stats['custom_keywords_count']}

üíº –†–∞–±–æ—á–∏–µ —á–∞—Ç—ã: {len(work_chats)}
üìù –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {filter_stats['work_keywords_count']}

üéØ –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.target_user_id else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
üìÅ –ê—Ä—Ö–∏–≤: {'–ê–∫—Ç–∏–≤–µ–Ω' if self.archive_manager else '–û—Ç–∫–ª—é—á–µ–Ω'}"""
            
            await update.message.reply_text(status_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    async def filter_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /filter"""
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /filter <add|list> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
            return
        
        command = context.args[0].lower()
        
        try:
            if command == "add" and len(context.args) >= 3:
                filter_type = context.args[1].lower()
                value = context.args[2]
                
                if filter_type == "allow":
                    success = self.message_filter.add_allow_chat(value)
                    await update.message.reply_text(f"{'‚úÖ' if success else '‚ùå'} Allowlist –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                elif filter_type == "deny":
                    success = self.message_filter.add_deny_chat(value)
                    await update.message.reply_text(f"{'‚úÖ' if success else '‚ùå'} Denylist –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                elif filter_type == "keyword":
                    success = self.message_filter.add_keyword(value)
                    await update.message.reply_text(f"{'‚úÖ' if success else '‚ùå'} –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                    
                else:
                    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞: allow, deny, keyword")
            
            elif command == "list":
                filters_data = self.db.get_filters()
                
                if not filters_data:
                    await update.message.reply_text("–§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                    return
                
                filter_text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
                
                allow_filters = [f for f in filters_data if f['kind'] == 'allow_chat']
                deny_filters = [f for f in filters_data if f['kind'] == 'deny_chat']
                keyword_filters = [f for f in filters_data if f['kind'] == 'keyword']
                
                if allow_filters:
                    filter_text += "‚úÖ Allowlist:\n"
                    for f in allow_filters:
                        filter_text += f"- {f['value']}\n"
                    filter_text += "\n"
                
                if deny_filters:
                    filter_text += "‚ùå Denylist:\n"
                    for f in deny_filters:
                        filter_text += f"- {f['value']}\n"
                    filter_text += "\n"
                
                if keyword_filters:
                    filter_text += "üî§ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n"
                    for f in keyword_filters:
                        filter_text += f"- {f['value']}\n"
                
                await update.message.reply_text(filter_text)
            
            else:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /filter <add|list> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã filter: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze - –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä—É—á–Ω—É—é"""
        try:
            await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            success = await self.run_hourly_analysis()
            
            if success:
                await update.message.reply_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message = update.message
            chat = update.effective_chat
            user = update.effective_user
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            is_work = self.message_filter.is_work_chat(str(chat.id), chat.title or "")
            self.db.insert_chat(
                chat_id=str(chat.id),
                title=chat.title or f"Chat with {user.first_name}",
                chat_type=chat.type,
                is_work=is_work
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.db.insert_message(
                chat_id=str(chat.id),
                tg_message_id=str(message.message_id),
                sender=user.first_name or "Unknown",
                text=message.text or "",
                ts=message.date,
                is_business=False,  # TODO: –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–ª—è business —Å–æ–æ–±—â–µ–Ω–∏–π
                raw_json=str(message.to_dict())
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
            self.db.update_chat_last_message(str(chat.id), str(message.message_id))
            
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {chat.id} - {user.first_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def run_hourly_analysis(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ —á–∞—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Returns:
            bool: True –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ó–∞–ø—É—Å–∫ —á–∞—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
            now = datetime.now()
            window_start = now - timedelta(hours=1)
            window_end = now
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ
            run_id = self.db.create_run(now, window_start, window_end)
            if not run_id:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = self.db.get_new_messages(window_start, window_end)
            
            if not messages:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
            all_chats_stats = self._get_chats_statistics(messages)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            work_messages = self.message_filter.filter_messages(messages)
            
            if not work_messages:
                logger.info("–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await self._send_statistics_report(all_chats_stats, 0)
                return True
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º
            chats_messages = {}
            for msg in work_messages:
                chat_id = msg['chat_id']
                if chat_id not in chats_messages:
                    chats_messages[chat_id] = []
                chats_messages[chat_id].append(msg)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
            all_reports = []
            for chat_id, chat_messages in chats_messages.items():
                analysis_result = self.summarizer.analyze_messages(chat_messages)
                
                if analysis_result:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –ë–î
                    summary = analysis_result['summary']
                    self.db.insert_report(
                        run_id=run_id,
                        chat_id=chat_id,
                        summary=str(summary.get('agreements', [])),
                        risks=str(summary.get('risks', [])),
                        actions=str(summary.get('recommendations', [])),
                        prompt_tokens=analysis_result.get('prompt_tokens', 0),
                        completion_tokens=analysis_result.get('completion_tokens', 0)
                    )
                    
                    all_reports.append({
                        'chat_id': chat_id,
                        'chat_title': chat_messages[0].get('title', f'Chat {chat_id}'),
                        'analysis': analysis_result
                    })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
            if all_reports:
                await self._send_analysis_report(all_reports, len(chats_messages), all_chats_stats)
                
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if self.archive_manager:
                    await self._archive_results(all_reports, run_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await self._send_statistics_report(all_chats_stats, len(chats_messages))
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {len(chats_messages)}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False
    
    async def _send_analysis_report(self, reports: List[Dict], active_chats_count: int, stats: Dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç"""
        if not self.target_user_id:
            logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤")
            return
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
            report_text = f"üóÇ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∑–∞ —á–∞—Å: {active_chats_count}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if stats:
                report_text += f"üìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {stats['total_chats']} | "
                report_text += f"üíº –†–∞–±–æ—á–∏—Ö: {stats['work_chats']} | "
                report_text += f"üè† –õ–∏—á–Ω—ã—Ö: {stats['personal_chats']} | "
                report_text += f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n\n"
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —á–∞—Ç–æ–≤
            all_agreements = []
            all_risks = []
            all_recommendations = []
            
            for report in reports:
                analysis = report['analysis']
                summary = analysis.get('summary', {})
                
                all_agreements.extend(summary.get('agreements', []))
                all_risks.extend(summary.get('risks', []))
                all_recommendations.extend(summary.get('recommendations', []))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if all_agreements:
                report_text += "üìå –∫–ª—é—á–µ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:\n"
                for agreement in all_agreements[:6]:  # –ú–∞–∫—Å–∏–º—É–º 6 –ø—É–Ω–∫—Ç–æ–≤
                    report_text += f"- {agreement}\n"
                report_text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫–∏
            if all_risks:
                report_text += "‚ö†Ô∏è —Ä–∏—Å–∫–∏:\n"
                for risk in all_risks[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏
                    report_text += f"- {risk}\n"
                report_text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if all_recommendations:
                report_text += "üöÄ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                for rec in all_recommendations[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–æ–∫
                    report_text += f"- {rec}\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await self.application.bot.send_message(
                chat_id=self.target_user_id,
                text=report_text
            )
            
            logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.target_user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def _archive_results(self, reports: List[Dict], run_id: int):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.archive_manager:
            return
        
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Drive –∏ Sheets
            logger.info(f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ run_id: {run_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def _get_chats_statistics(self, messages: List[Dict]) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º"""
        try:
            stats = {
                'total_messages': len(messages),
                'total_chats': 0,
                'work_chats': 0,
                'personal_chats': 0,
                'chats_detail': {}
            }
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º
            chats_data = {}
            for msg in messages:
                chat_id = msg['chat_id']
                if chat_id not in chats_data:
                    chats_data[chat_id] = {
                        'title': msg.get('title', f'Chat {chat_id}'),
                        'messages_count': 0,
                        'is_work': self.message_filter.is_work_chat(chat_id, msg.get('title', ''))
                    }
                chats_data[chat_id]['messages_count'] += 1
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats['total_chats'] = len(chats_data)
            for chat_id, chat_data in chats_data.items():
                if chat_data['is_work']:
                    stats['work_chats'] += 1
                else:
                    stats['personal_chats'] += 1
                
                stats['chats_detail'][chat_id] = chat_data
            
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤: {e}")
            return {'total_messages': 0, 'total_chats': 0, 'work_chats': 0, 'personal_chats': 0, 'chats_detail': {}}
    
    async def _send_statistics_report(self, stats: Dict, work_chats_count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        if not self.target_user_id:
            logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤")
            return
        
        try:
            report_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —á–∞—Å:\n\n"
            report_text += f"üóÇ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {stats['total_chats']}\n"
            report_text += f"üíº –†–∞–±–æ—á–∏—Ö —á–∞—Ç–æ–≤: {stats['work_chats']}\n"
            report_text += f"üè† –õ–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['personal_chats']}\n"
            report_text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n\n"
            
            if stats['total_chats'] > 0:
                report_text += "üìã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Ç–∞–º:\n"
                for chat_id, chat_data in stats['chats_detail'].items():
                    chat_type = "üíº" if chat_data['is_work'] else "üè†"
                    report_text += f"{chat_type} {chat_data['title']}: {chat_data['messages_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            if work_chats_count == 0:
                report_text += "\n‚ö†Ô∏è –†–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await self.application.bot.send_message(
                chat_id=self.target_user_id,
                text=report_text
            )
            
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.target_user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            self.application.add_error_handler(self._error_handler)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            self.application.run_polling()
            
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def _error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã - –æ–Ω–∏ —Ä–µ—à–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if "Conflict" in str(context.error):
            logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç - Telegram API –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∏—Ç –ø—Ä–æ–±–ª–µ–º—É")
            return


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Railway)
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    openai_api_key = os.getenv("OPENAI_API_KEY")
    google_credentials_file = os.getenv("GOOGLE_CREDENTIALS_FILE")
    target_user_id = os.getenv("TARGET_USER_ID")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    logger.info(f"TELEGRAM_BOT_TOKEN: {'SET' if bot_token else 'NOT SET'}")
    logger.info(f"OPENAI_API_KEY: {'SET' if openai_api_key else 'NOT SET'}")
    logger.info(f"TARGET_USER_ID: {target_user_id}")
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ config.py
    if not bot_token:
        try:
            from .config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, GOOGLE_CREDENTIALS_FILE, TARGET_USER_ID
            bot_token = TELEGRAM_BOT_TOKEN
            openai_api_key = OPENAI_API_KEY
            google_credentials_file = GOOGLE_CREDENTIALS_FILE
            target_user_id = TARGET_USER_ID
            logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.py")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ config.py: {e}")
    
    if not bot_token or not openai_api_key:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.error(f"bot_token: {'SET' if bot_token else 'NOT SET'}")
        logger.error(f"openai_api_key: {'SET' if openai_api_key else 'NOT SET'}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TelegramAnalyticsBot(
        bot_token=bot_token,
        openai_api_key=openai_api_key,
        google_credentials_file=google_credentials_file,
        target_user_id=target_user_id
    )
    
    bot.start_bot()


if __name__ == "__main__":
    main()
